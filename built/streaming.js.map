{
  "version": 3,
  "sources": ["../src/streaming.ts"],
  "sourcesContent": ["import { EventEmitter } from 'eventemitter3';\nimport _ReconnectingWebsocket from 'reconnecting-websocket';\nimport type { BroadcastEvents, Channels } from './streaming.types.js';\n\nconst ReconnectingWebsocket = _ReconnectingWebsocket as unknown as typeof _ReconnectingWebsocket['default'];\n\nexport function urlQuery(obj: Record<string, string | number | boolean | undefined>): string {\n\tconst params = Object.entries(obj)\n\t\t.filter(([, v]) => Array.isArray(v) ? v.length : v !== undefined)\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t.reduce((a, [k, v]) => (a[k] = v!, a), {} as Record<string, string | number | boolean>);\n\n\treturn Object.entries(params)\n\t\t.map((e) => `${e[0]}=${encodeURIComponent(e[1])}`)\n\t\t.join('&');\n}\n\ntype AnyOf<T extends Record<PropertyKey, unknown>> = T[keyof T];\n\ntype StreamEvents = {\n\t_connected_: void;\n\t_disconnected_: void;\n} & BroadcastEvents;\n\n/**\n * Misskey stream connection\n */\n// eslint-disable-next-line import/no-default-export\nexport default class Stream extends EventEmitter<StreamEvents> {\n\tprivate stream: _ReconnectingWebsocket.default;\n\tpublic state: 'initializing' | 'reconnecting' | 'connected' = 'initializing';\n\tprivate sharedConnectionPools: Pool[] = [];\n\tprivate sharedConnections: SharedConnection[] = [];\n\tprivate nonSharedConnections: NonSharedConnection[] = [];\n\tprivate idCounter = 0;\n\n\tconstructor(origin: string, user: { token: string; } | null, options?: {\n\t\tWebSocket?: WebSocket;\n\t}) {\n\t\tsuper();\n\n\t\tthis.genId = this.genId.bind(this);\n\t\tthis.useChannel = this.useChannel.bind(this);\n\t\tthis.useSharedConnection = this.useSharedConnection.bind(this);\n\t\tthis.removeSharedConnection = this.removeSharedConnection.bind(this);\n\t\tthis.removeSharedConnectionPool = this.removeSharedConnectionPool.bind(this);\n\t\tthis.connectToChannel = this.connectToChannel.bind(this);\n\t\tthis.disconnectToChannel = this.disconnectToChannel.bind(this);\n\t\tthis.onOpen = this.onOpen.bind(this);\n\t\tthis.onClose = this.onClose.bind(this);\n\t\tthis.onMessage = this.onMessage.bind(this);\n\t\tthis.send = this.send.bind(this);\n\t\tthis.close = this.close.bind(this);\n\n\t\t// eslint-disable-next-line no-param-reassign\n\t\toptions = options ?? { };\n\n\t\tconst query = urlQuery({\n\t\t\ti: user?.token,\n\n\t\t\t// To prevent cache of an HTML such as error screen\n\t\t\t_t: Date.now(),\n\t\t});\n\n\t\tconst wsOrigin = origin.replace('http://', 'ws://').replace('https://', 'wss://');\n\n\t\tthis.stream = new ReconnectingWebsocket(`${wsOrigin}/streaming?${query}`, '', {\n\t\t\tminReconnectionDelay: 1000, // https://github.com/pladaria/reconnecting-websocket/issues/91\n\t\t\tWebSocket: options.WebSocket,\n\t\t});\n\t\tthis.stream.addEventListener('open', this.onOpen);\n\t\tthis.stream.addEventListener('close', this.onClose);\n\t\tthis.stream.addEventListener('message', this.onMessage);\n\t}\n\n\tprivate genId(): string {\n\t\treturn (++this.idCounter).toString();\n\t}\n\n\tpublic useChannel<C extends keyof Channels>(channel: C, params?: Channels[C]['params'], name?: string): Connection<Channels[C]> {\n\t\tif (params) {\n\t\t\treturn this.connectToChannel(channel, params);\n\t\t} else {\n\t\t\treturn this.useSharedConnection(channel, name);\n\t\t}\n\t}\n\n\tprivate useSharedConnection<C extends keyof Channels>(channel: C, name?: string): SharedConnection<Channels[C]> {\n\t\tlet pool = this.sharedConnectionPools.find(p => p.channel === channel);\n\n\t\tif (pool == null) {\n\t\t\tpool = new Pool(this, channel, this.genId());\n\t\t\tthis.sharedConnectionPools.push(pool);\n\t\t}\n\n\t\tconst connection = new SharedConnection<Channels[C]>(this, channel, pool, name);\n\t\tthis.sharedConnections.push(connection as unknown as SharedConnection);\n\t\treturn connection;\n\t}\n\n\tpublic removeSharedConnection(connection: SharedConnection): void {\n\t\tthis.sharedConnections = this.sharedConnections.filter(c => c !== connection);\n\t}\n\n\tpublic removeSharedConnectionPool(pool: Pool): void {\n\t\tthis.sharedConnectionPools = this.sharedConnectionPools.filter(p => p !== pool);\n\t}\n\n\tprivate connectToChannel<C extends keyof Channels>(channel: C, params: Channels[C]['params']): NonSharedConnection<Channels[C]> {\n\t\tconst connection = new NonSharedConnection(this, channel, this.genId(), params);\n\t\tthis.nonSharedConnections.push(connection as unknown as NonSharedConnection);\n\t\treturn connection;\n\t}\n\n\tpublic disconnectToChannel(connection: NonSharedConnection): void {\n\t\tthis.nonSharedConnections = this.nonSharedConnections.filter(c => c !== connection);\n\t}\n\n\t/**\n\t * Callback of when open connection\n\t */\n\tprivate onOpen(): void {\n\t\tconst isReconnect = this.state === 'reconnecting';\n\n\t\tthis.state = 'connected';\n\t\tthis.emit('_connected_');\n\n\t\t// \u30C1\u30E3\u30F3\u30CD\u30EB\u518D\u63A5\u7D9A\n\t\tif (isReconnect) {\n\t\t\tfor (const p of this.sharedConnectionPools) p.connect();\n\t\t\tfor (const c of this.nonSharedConnections) c.connect();\n\t\t}\n\t}\n\n\t/**\n\t * Callback of when close connection\n\t */\n\tprivate onClose(): void {\n\t\tif (this.state === 'connected') {\n\t\t\tthis.state = 'reconnecting';\n\t\t\tthis.emit('_disconnected_');\n\t\t}\n\t}\n\n\t/**\n\t * Callback of when received a message from connection\n\t */\n\tprivate onMessage(message: { data: string; }): void {\n\t\tconst { type, body } = JSON.parse(message.data);\n\n\t\tif (type === 'channel') {\n\t\t\tconst id = body.id;\n\n\t\t\tlet connections: Connection[];\n\n\t\t\tconnections = this.sharedConnections.filter(c => c.id === id);\n\n\t\t\tif (connections.length === 0) {\n\t\t\t\tconst found = this.nonSharedConnections.find(c => c.id === id);\n\t\t\t\tif (found) {\n\t\t\t\t\tconnections = [found];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const c of connections) {\n\t\t\t\tc.emit(body.type, body.body);\n\t\t\t\tc.inCount++;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.emit(type, body);\n\t\t}\n\t}\n\n\t/**\n\t * Send a message to connection\n\t * ! \u30B9\u30C8\u30EA\u30FC\u30E0\u4E0A\u306E\u3084\u308A\u53D6\u308A\u306F\u3059\u3079\u3066JSON\u3067\u884C\u308F\u308C\u307E\u3059 !\n\t */\n\tpublic send(typeOrPayload: string): void\n\tpublic send(typeOrPayload: string, payload: unknown): void\n\tpublic send(typeOrPayload: Record<string, unknown> | unknown[]): void\n\tpublic send(typeOrPayload: string | Record<string, unknown> | unknown[], payload?: unknown): void {\n\t\tif (typeof typeOrPayload === 'string') {\n\t\t\tthis.stream.send(JSON.stringify({\n\t\t\t\ttype: typeOrPayload,\n\t\t\t\t...(payload === undefined ? {} : { body: payload }),\n\t\t\t}));\n\t\t\treturn;\n\t\t}\n\n\t\tthis.stream.send(JSON.stringify(typeOrPayload));\n\t}\n\n\tpublic ping(): void {\n\t\tthis.stream.send('ping');\n\t}\n\n\tpublic heartbeat(): void {\n\t\tthis.stream.send('h');\n\t}\n\n\tpublic reconnect(): void {\n\t\tthis.stream.reconnect();\n\t}\n\n\t/**\n\t * Close this connection\n\t */\n\tpublic close(): void {\n\t\tthis.stream.close();\n\t}\n}\n\n// TODO: \u3053\u308C\u3089\u306E\u30AF\u30E9\u30B9\u3092 Stream \u30AF\u30E9\u30B9\u306E\u5185\u90E8\u30AF\u30E9\u30B9\u306B\u3059\u308C\u3070\u4F59\u8A08\u306A\u30E1\u30F3\u30D0\u3092public\u306B\u3057\u306A\u3044\u3067\u6E08\u3080\u304B\u3082\uFF1F\n// \u3082\u3057\u304F\u306F @internal \u3092\u4F7F\u3046\uFF1F https://www.typescriptlang.org/tsconfig#stripInternal\nclass Pool {\n\tpublic channel: string;\n\tpublic id: string;\n\tprotected stream: Stream;\n\tpublic users = 0;\n\tprivate disposeTimerId: ReturnType<typeof setTimeout> | null = null;\n\tprivate isConnected = false;\n\n\tconstructor(stream: Stream, channel: string, id: string) {\n\t\tthis.onStreamDisconnected = this.onStreamDisconnected.bind(this);\n\t\tthis.inc = this.inc.bind(this);\n\t\tthis.dec = this.dec.bind(this);\n\t\tthis.connect = this.connect.bind(this);\n\t\tthis.disconnect = this.disconnect.bind(this);\n\n\t\tthis.channel = channel;\n\t\tthis.stream = stream;\n\t\tthis.id = id;\n\n\t\tthis.stream.on('_disconnected_', this.onStreamDisconnected);\n\t}\n\n\tprivate onStreamDisconnected(): void {\n\t\tthis.isConnected = false;\n\t}\n\n\tpublic inc(): void {\n\t\tif (this.users === 0 && !this.isConnected) {\n\t\t\tthis.connect();\n\t\t}\n\n\t\tthis.users++;\n\n\t\t// \u30BF\u30A4\u30DE\u30FC\u89E3\u9664\n\t\tif (this.disposeTimerId) {\n\t\t\tclearTimeout(this.disposeTimerId);\n\t\t\tthis.disposeTimerId = null;\n\t\t}\n\t}\n\n\tpublic dec(): void {\n\t\tthis.users--;\n\n\t\t// \u305D\u306E\u30B3\u30CD\u30AF\u30B7\u30E7\u30F3\u306E\u5229\u7528\u8005\u304C\u8AB0\u3082\u3044\u306A\u304F\u306A\u3063\u305F\u3089\n\t\tif (this.users === 0) {\n\t\t\t// \u307E\u305F\u76F4\u3050\u306B\u518D\u5229\u7528\u3055\u308C\u308B\u53EF\u80FD\u6027\u304C\u3042\u308B\u306E\u3067\u3001\u4E00\u5B9A\u6642\u9593\u5F85\u3061\u3001\n\t\t\t// \u65B0\u305F\u306A\u5229\u7528\u8005\u304C\u73FE\u308C\u306A\u3051\u308C\u3070\u30B3\u30CD\u30AF\u30B7\u30E7\u30F3\u3092\u5207\u65AD\u3059\u308B\n\t\t\tthis.disposeTimerId = setTimeout(() => {\n\t\t\t\tthis.disconnect();\n\t\t\t}, 3000);\n\t\t}\n\t}\n\n\tpublic connect(): void {\n\t\tif (this.isConnected) return;\n\t\tthis.isConnected = true;\n\t\tthis.stream.send('connect', {\n\t\t\tchannel: this.channel,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\tprivate disconnect(): void {\n\t\tthis.stream.off('_disconnected_', this.onStreamDisconnected);\n\t\tthis.stream.send('disconnect', { id: this.id });\n\t\tthis.stream.removeSharedConnectionPool(this);\n\t}\n}\n\nexport abstract class Connection<Channel extends AnyOf<Channels> = AnyOf<Channels>> extends EventEmitter<Channel['events']> {\n\tpublic channel: string;\n\tprotected stream: Stream;\n\tpublic abstract id: string;\n\n\tpublic name?: string; // for debug\n\tpublic inCount = 0; // for debug\n\tpublic outCount = 0; // for debug\n\n\tconstructor(stream: Stream, channel: string, name?: string) {\n\t\tsuper();\n\n\t\tthis.send = this.send.bind(this);\n\n\t\tthis.stream = stream;\n\t\tthis.channel = channel;\n\t\tif (name !== undefined) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\tpublic send<T extends keyof Channel['receives']>(type: T, body: Channel['receives'][T]): void {\n\t\tthis.stream.send('ch', {\n\t\t\tid: this.id,\n\t\t\ttype: type,\n\t\t\tbody: body,\n\t\t});\n\n\t\tthis.outCount++;\n\t}\n\n\tpublic abstract dispose(): void;\n}\n\nclass SharedConnection<Channel extends AnyOf<Channels> = AnyOf<Channels>> extends Connection<Channel> {\n\tprivate pool: Pool;\n\n\tpublic get id(): string {\n\t\treturn this.pool.id;\n\t}\n\n\tconstructor(stream: Stream, channel: string, pool: Pool, name?: string) {\n\t\tsuper(stream, channel, name);\n\n\t\tthis.dispose = this.dispose.bind(this);\n\n\t\tthis.pool = pool;\n\t\tthis.pool.inc();\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.pool.dec();\n\t\tthis.removeAllListeners();\n\t\tthis.stream.removeSharedConnection(this as unknown as SharedConnection);\n\t}\n}\n\nclass NonSharedConnection<Channel extends AnyOf<Channels> = AnyOf<Channels>> extends Connection<Channel> {\n\tpublic id: string;\n\tprotected params: Channel['params'];\n\n\tconstructor(stream: Stream, channel: string, id: string, params: Channel['params']) {\n\t\tsuper(stream, channel);\n\n\t\tthis.connect = this.connect.bind(this);\n\t\tthis.dispose = this.dispose.bind(this);\n\n\t\tthis.params = params;\n\t\tthis.id = id;\n\n\t\tthis.connect();\n\t}\n\n\tpublic connect(): void {\n\t\tthis.stream.send('connect', {\n\t\t\tchannel: this.channel,\n\t\t\tid: this.id,\n\t\t\tparams: this.params,\n\t\t});\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.removeAllListeners();\n\t\tthis.stream.send('disconnect', { id: this.id });\n\t\tthis.stream.disconnectToChannel(this as unknown as NonSharedConnection);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
