{
  "version": 3,
  "sources": ["../src/api.ts"],
  "sourcesContent": ["import './autogen/apiClientJSDoc.js';\n\nimport { endpointReqTypes } from './autogen/endpoint.js';\nimport type { SwitchCaseResponseType, Endpoints } from './api.types.js';\n\nexport type {\n\tSwitchCaseResponseType,\n} from './api.types.js';\n\nconst MK_API_ERROR = Symbol();\n\nexport type APIError = {\n\tid: string;\n\tcode: string;\n\tmessage: string;\n\tkind: 'client' | 'server';\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tinfo: Record<string, any>;\n};\n\nexport function isAPIError(reason: Record<PropertyKey, unknown>): reason is APIError {\n\treturn reason[MK_API_ERROR] === true;\n}\n\nexport type FetchLike = (input: string, init?: {\n\tmethod?: string;\n\tbody?: Blob | FormData | string;\n\tcredentials?: RequestCredentials;\n\tcache?: RequestCache;\n\theaders: { [key in string]: string }\n}) => Promise<{\n\tstatus: number;\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tjson(): Promise<any>;\n}>;\n\nexport class APIClient {\n\tpublic origin: string;\n\tpublic credential: string | null | undefined;\n\tpublic fetch: FetchLike;\n\n\tconstructor(opts: {\n\t\torigin: APIClient['origin'];\n\t\tcredential?: APIClient['credential'];\n\t\tfetch?: APIClient['fetch'] | null | undefined;\n\t}) {\n\t\tthis.origin = opts.origin;\n\t\tthis.credential = opts.credential;\n\t\t// \u30CD\u30A4\u30C6\u30A3\u30D6\u95A2\u6570\u3092\u305D\u306E\u307E\u307E\u5909\u6570\u306B\u4EE3\u5165\u3057\u3066\u4F7F\u304A\u3046\u3068\u3059\u308B\u3068Chromium\u3067\u306FIllegal invocation\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3059\u308B\u305F\u3081\u3001\n\t\t// \u74B0\u5883\u3067\u5B9F\u88C5\u3055\u308C\u3066\u3044\u308Bfetch\u3092\u4F7F\u3046\u5834\u5408\u306F\u7121\u540D\u95A2\u6570\u3067\u30E9\u30C3\u30D7\u3057\u3066\u4F7F\u7528\u3059\u308B\n\t\tthis.fetch = opts.fetch ?? ((...args) => fetch(...args));\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tprivate assertIsRecord<T>(obj: T): obj is T & Record<string, any> {\n\t\treturn obj !== null && typeof obj === 'object' && !Array.isArray(obj);\n\t}\n\n\tprivate assertSpecialEpReqType(ep: keyof Endpoints): ep is keyof typeof endpointReqTypes {\n\t\treturn ep in endpointReqTypes;\n\t}\n\n\tpublic request<E extends keyof Endpoints, P extends Endpoints[E]['req']>(\n\t\tendpoint: E,\n\t\tparams: P = {} as P,\n\t\tcredential?: string | null,\n\t): Promise<SwitchCaseResponseType<E, P>> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet mediaType = 'application/json';\n\t\t\t// \uFF08autogen\u304C\u30D0\u30B0\u3063\u305F\u3068\u304D\u306E\u305F\u3081\u3001\u5FF5\u306E\u70BAnull\u30C1\u30A7\u30C3\u30AF\u3082\u884C\u3046\uFF09\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\t\tif (this.assertSpecialEpReqType(endpoint) && endpointReqTypes[endpoint] != null) {\n\t\t\t\tmediaType = endpointReqTypes[endpoint];\n\t\t\t}\n\n\t\t\tlet payload: FormData | string = '{}';\n\n\t\t\tif (mediaType === 'application/json') {\n\t\t\t\tpayload = JSON.stringify({\n\t\t\t\t\t...params,\n\t\t\t\t\ti: credential !== undefined ? credential : this.credential,\n\t\t\t\t});\n\t\t\t} else if (mediaType === 'multipart/form-data') {\n\t\t\t\tpayload = new FormData();\n\t\t\t\tconst i = credential !== undefined ? credential : this.credential;\n\t\t\t\tif (i != null) {\n\t\t\t\t\tpayload.append('i', i);\n\t\t\t\t}\n\t\t\t\tif (this.assertIsRecord(params)) {\n\t\t\t\t\tfor (const key in params) {\n\t\t\t\t\t\tconst value = params[key];\n\n\t\t\t\t\t\tif (value == null) continue;\n\n\t\t\t\t\t\tif (value instanceof File || value instanceof Blob) {\n\t\t\t\t\t\t\tpayload.append(key, value);\n\t\t\t\t\t\t} else if (typeof value === 'object') {\n\t\t\t\t\t\t\tpayload.append(key, JSON.stringify(value));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpayload.append(key, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.fetch(`${this.origin}/api/${endpoint}`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: payload,\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': mediaType,\n\t\t\t\t},\n\t\t\t\tcredentials: 'omit',\n\t\t\t\tcache: 'no-cache',\n\t\t\t}).then(async (res) => {\n\t\t\t\tconst body = res.status === 204 ? null : await res.json();\n\n\t\t\t\tif (res.status === 200 || res.status === 204) {\n\t\t\t\t\tresolve(body);\n\t\t\t\t} else {\n\t\t\t\t\treject({\n\t\t\t\t\t\t[MK_API_ERROR]: true,\n\t\t\t\t\t\t...body.error,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).catch(reject);\n\t\t});\n\t}\n}\n"],
  "mappings": "AAAA,OAAO;AAEP,SAAS,wBAAwB;AAOjC,MAAM,eAAe,OAAO;AAWrB,SAAS,WAAW,QAA0D;AACpF,SAAO,OAAO,YAAY,MAAM;AACjC;AAcO,MAAM,UAAU;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EAEP,YAAY,MAIT;AACF,SAAK,SAAS,KAAK;AACnB,SAAK,aAAa,KAAK;AAGvB,SAAK,QAAQ,KAAK,UAAU,IAAI,SAAS,MAAM,GAAG,IAAI;AAAA,EACvD;AAAA;AAAA,EAGQ,eAAkB,KAAwC;AACjE,WAAO,QAAQ,QAAQ,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,GAAG;AAAA,EACrE;AAAA,EAEQ,uBAAuB,IAA0D;AACxF,WAAO,MAAM;AAAA,EACd;AAAA,EAEO,QACN,UACA,SAAY,CAAC,GACb,YACwC;AACxC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,UAAI,YAAY;AAGhB,UAAI,KAAK,uBAAuB,QAAQ,KAAK,iBAAiB,QAAQ,KAAK,MAAM;AAChF,oBAAY,iBAAiB,QAAQ;AAAA,MACtC;AAEA,UAAI,UAA6B;AAEjC,UAAI,cAAc,oBAAoB;AACrC,kBAAU,KAAK,UAAU;AAAA,UACxB,GAAG;AAAA,UACH,GAAG,eAAe,SAAY,aAAa,KAAK;AAAA,QACjD,CAAC;AAAA,MACF,WAAW,cAAc,uBAAuB;AAC/C,kBAAU,IAAI,SAAS;AACvB,cAAM,IAAI,eAAe,SAAY,aAAa,KAAK;AACvD,YAAI,KAAK,MAAM;AACd,kBAAQ,OAAO,KAAK,CAAC;AAAA,QACtB;AACA,YAAI,KAAK,eAAe,MAAM,GAAG;AAChC,qBAAW,OAAO,QAAQ;AACzB,kBAAM,QAAQ,OAAO,GAAG;AAExB,gBAAI,SAAS,KAAM;AAEnB,gBAAI,iBAAiB,QAAQ,iBAAiB,MAAM;AACnD,sBAAQ,OAAO,KAAK,KAAK;AAAA,YAC1B,WAAW,OAAO,UAAU,UAAU;AACrC,sBAAQ,OAAO,KAAK,KAAK,UAAU,KAAK,CAAC;AAAA,YAC1C,OAAO;AACN,sBAAQ,OAAO,KAAK,KAAK;AAAA,YAC1B;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,WAAK,MAAM,GAAG,KAAK,MAAM,QAAQ,QAAQ,IAAI;AAAA,QAC5C,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,SAAS;AAAA,UACR,gBAAgB;AAAA,QACjB;AAAA,QACA,aAAa;AAAA,QACb,OAAO;AAAA,MACR,CAAC,EAAE,KAAK,OAAO,QAAQ;AACtB,cAAM,OAAO,IAAI,WAAW,MAAM,OAAO,MAAM,IAAI,KAAK;AAExD,YAAI,IAAI,WAAW,OAAO,IAAI,WAAW,KAAK;AAC7C,kBAAQ,IAAI;AAAA,QACb,OAAO;AACN,iBAAO;AAAA,YACN,CAAC,YAAY,GAAG;AAAA,YAChB,GAAG,KAAK;AAAA,UACT,CAAC;AAAA,QACF;AAAA,MACD,CAAC,EAAE,MAAM,MAAM;AAAA,IAChB,CAAC;AAAA,EACF;AACD;",
  "names": []
}
