{
  "version": 3,
  "sources": ["../src/entities.ts"],
  "sourcesContent": ["import {\n\tEmojiDetailed,\n\tMeDetailed,\n\tNote,\n\tRole,\n\tRolePolicies,\n\tUser,\n} from './autogen/models.js';\nimport type { AuthenticationResponseJSON, PublicKeyCredentialRequestOptionsJSON } from '@simplewebauthn/types';\n\nexport * from './autogen/entities.js';\nexport * from './autogen/models.js';\n\nexport type ID = string;\nexport type DateString = string;\n\ntype NonNullableRecord<T> = {\n\t[P in keyof T]-?: NonNullable<T[P]>;\n};\ntype AllNullRecord<T> = {\n\t[P in keyof T]: null;\n};\n\nexport type PureRenote =\n\tOmit<Note, 'renote' | 'renoteId' | 'reply' | 'replyId' | 'text' | 'cw' | 'files' | 'fileIds' | 'poll'>\n\t& AllNullRecord<Pick<Note, 'reply' | 'replyId' | 'text' | 'cw' | 'poll'>>\n\t& { files: []; fileIds: []; }\n\t& NonNullableRecord<Pick<Note, 'renote' | 'renoteId'>>;\n\nexport type ServerStats = {\n\tcpu: number;\n\tmem: number;\n};\n\nexport type ServerStatsLog = ServerStats[];\n\nexport type QueueStats = {\n\tdeliver: {\n\t\tactiveSincePrevTick: number;\n\t\tactive: number;\n\t\twaiting: number;\n\t\tdelayed: number;\n\t};\n\tinbox: {\n\t\tactiveSincePrevTick: number;\n\t\tactive: number;\n\t\twaiting: number;\n\t\tdelayed: number;\n\t};\n};\n\nexport type QueueStatsLog = QueueStats[];\n\nexport type EmojiAdded = {\n\temoji: EmojiDetailed\n};\n\nexport type EmojiUpdated = {\n\temojis: EmojiDetailed[]\n};\n\nexport type EmojiDeleted = {\n\temojis: EmojiDetailed[]\n};\n\nexport type SignupRequest = {\n\tusername: string;\n\tpassword: string;\n\thost?: string;\n\tinvitationCode?: string;\n\temailAddress?: string;\n\t'hcaptcha-response'?: string | null;\n\t'g-recaptcha-response'?: string | null;\n\t'turnstile-response'?: string | null;\n\t'm-captcha-response'?: string | null;\n}\n\nexport type SignupResponse = MeDetailed & {\n\ttoken: string;\n}\n\nexport type SignupPendingRequest = {\n\tcode: string;\n};\n\nexport type SignupPendingResponse = {\n\tid: User['id'],\n\ti: string,\n};\n\nexport type SigninFlowRequest = {\n\tusername: string;\n\tpassword?: string;\n\ttoken?: string;\n\tcredential?: AuthenticationResponseJSON;\n\t'hcaptcha-response'?: string | null;\n\t'g-recaptcha-response'?: string | null;\n\t'turnstile-response'?: string | null;\n\t'm-captcha-response'?: string | null;\n};\n\nexport type SigninFlowResponse = {\n\tfinished: true;\n\tid: User['id'];\n\ti: string;\n} | {\n\tfinished: false;\n\tnext: 'captcha' | 'password' | 'totp';\n} | {\n\tfinished: false;\n\tnext: 'passkey';\n\tauthRequest: PublicKeyCredentialRequestOptionsJSON;\n};\n\nexport type SigninWithPasskeyRequest = {\n\tcredential?: AuthenticationResponseJSON;\n\tcontext?: string;\n};\n\nexport type SigninWithPasskeyInitResponse = {\n\toption: PublicKeyCredentialRequestOptionsJSON;\n\tcontext: string;\n};\n\nexport type SigninWithPasskeyResponse = {\n\tsigninResponse: SigninFlowResponse & { finished: true };\n};\n\ntype Values<T extends Record<PropertyKey, unknown>> = T[keyof T];\n\nexport type PartialRolePolicyOverride = Partial<{[k in keyof RolePolicies]: Omit<Values<Role['policies']>, 'value'> & { value: RolePolicies[k] }}>;\n"],
  "mappings": "AAUA,cAAc;AACd,cAAc;",
  "names": []
}
